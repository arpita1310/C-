class Solution {
public:
TreeNode* inorderPredecessor(TreeNode* root){
    TreeNode* curr = root->right;
    while(curr && curr->left != NULL){
        curr = curr->left;
    }
    return curr;
}
    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root == NULL){
            return root;
        }
        if(key > root->val){
            root->right = deleteNode(root->right, key);
        }
        else if(key < root->val){
            root->left = deleteNode(root->left, key);
        }
        else{
            if(root->left == NULL){
                TreeNode* temp = root->right;
                delete(root);
                return temp;
            }
            else if(root->right == NULL){
                TreeNode* temp = root->left;
                delete(root);
                return temp;
            }
            TreeNode* inPre = inorderPredecessor(root);
            root->val = inPre->val;
            root->right = deleteNode(root->right, inPre->val);
        }
        return root;
    }
};